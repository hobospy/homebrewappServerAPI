// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using homebrewAppServerAPI.Persistence.Contexts;

namespace homebrewAppServerAPI.Migrations
{
    [DbContext(typeof(SqliteDbContext))]
    [Migration("20200803045107_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("homebrewAppServerAPI.Domain.Models.Brew", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("ABV")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("BrewDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Brewed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BrewingNotes")
                        .HasColumnType("TEXT")
                        .HasMaxLength(2000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.Property<int>("RecipeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("RecipeID");

                    b.ToTable("Brews");

                    b.HasData(
                        new
                        {
                            ID = 3000,
                            ABV = 5.5,
                            BrewDate = new DateTime(2019, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Brewed = false,
                            Name = "Brothers Kolsch Ripoff I",
                            Rating = 2.2999999999999998,
                            RecipeID = 2000
                        },
                        new
                        {
                            ID = 3001,
                            ABV = 4.9000000000000004,
                            BrewDate = new DateTime(2019, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Brewed = false,
                            Name = "Brothers Kolsch Ripoff II",
                            Rating = 4.7000000000000002,
                            RecipeID = 2000
                        },
                        new
                        {
                            ID = 3002,
                            ABV = 4.7000000000000002,
                            BrewDate = new DateTime(2020, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Brewed = false,
                            Name = "Amarillo SMaSH I",
                            Rating = 0.0,
                            RecipeID = 2001
                        },
                        new
                        {
                            ID = 3003,
                            ABV = 4.7000000000000002,
                            BrewDate = new DateTime(2020, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Brewed = false,
                            Name = "Brothers Kolsch Ripoff III",
                            Rating = 5.0,
                            RecipeID = 2000
                        });
                });

            modelBuilder.Entity("homebrewAppServerAPI.Domain.Models.Ingredient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<int>("RecipeStepID")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unit")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("RecipeStepID");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            ID = 7001,
                            Amount = 5.5,
                            Name = "Pale ale",
                            RecipeStepID = 9000,
                            Type = (short)0,
                            Unit = 0
                        },
                        new
                        {
                            ID = 7002,
                            Amount = 0.29999999999999999,
                            Name = "Wheat malt",
                            RecipeStepID = 9000,
                            Type = (short)0,
                            Unit = 0
                        },
                        new
                        {
                            ID = 7003,
                            Amount = 0.20000000000000001,
                            Name = "Light crystal malt",
                            RecipeStepID = 9000,
                            Type = (short)0,
                            Unit = 0
                        },
                        new
                        {
                            ID = 7004,
                            Amount = 65.0,
                            Name = "Amarillo",
                            RecipeStepID = 9001,
                            Type = (short)1,
                            Unit = 1
                        });
                });

            modelBuilder.Entity("homebrewAppServerAPI.Domain.Models.Recipe", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<double>("ExpectedABV")
                        .HasColumnType("REAL");

                    b.Property<bool>("Favourite")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<short>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WaterProfileID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("WaterProfileID");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            ID = 2000,
                            Description = "Kolsch is a unique style in that it is fermented with ale yeast, but then finished with lagering. The result is the best of both worlds: A light easy drinking pale that finishes crisp and clean. The most basic way to separate beers into different styles is by yeast. By far, the two largest groups are ales and lagers.",
                            ExpectedABV = 0.0,
                            Favourite = true,
                            Name = "Brothers Kolsch Ripoff",
                            Type = (short)23,
                            WaterProfileID = 1001
                        },
                        new
                        {
                            ID = 2001,
                            Description = "Characterized by floral, fruity, citrus-like, piney, resinous American hops, the American pale ale is a medium-bodied beer with low to medium caramel, and carries with it a toasted maltiness.",
                            ExpectedABV = 0.0,
                            Favourite = true,
                            Name = "Amarillo SMaSH",
                            Type = (short)9,
                            WaterProfileID = 1000
                        },
                        new
                        {
                            ID = 2002,
                            Description = "A moderate-strength brown beer with a restrained roasty character and bitterness. May have a range of roasted flavors, generally without burnt qualities, and often has a chocolate-caramel-malty profile.",
                            ExpectedABV = 0.0,
                            Favourite = false,
                            Name = "Raspberry Brown Porter",
                            Type = (short)11,
                            WaterProfileID = 1002
                        },
                        new
                        {
                            ID = 2003,
                            Description = "Saison (French, \"season,\" French pronunciation: ​[sɛ. zɔ̃]) is a pale ale that is highly carbonated, fruity, spicy, and often bottle conditioned. It was historically brewed with low alcohol levels, but modern productions of the style have moderate to high levels of alcohol.",
                            ExpectedABV = 0.0,
                            Favourite = false,
                            Name = "Pepper Saison",
                            Type = (short)17,
                            WaterProfileID = 1001
                        },
                        new
                        {
                            ID = 2004,
                            Description = "Sour beer is beer which has an intentionally acidic, tart, or sour taste. Traditional sour beer styles include Belgian lambics, gueuze, and Flanders red ale.",
                            ExpectedABV = 0.0,
                            Favourite = true,
                            Name = "White Peach Sour",
                            Type = (short)16,
                            WaterProfileID = 1001
                        });
                });

            modelBuilder.Entity("homebrewAppServerAPI.Domain.Models.RecipeStep", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("RecipeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("RecipeID");

                    b.ToTable("RecipeSteps");

                    b.HasData(
                        new
                        {
                            ID = 9000,
                            Description = "Add grain and mash in",
                            RecipeID = 2001
                        },
                        new
                        {
                            ID = 9001,
                            Description = "Mash out and get to boil",
                            RecipeID = 2001
                        });
                });

            modelBuilder.Entity("homebrewAppServerAPI.Domain.Models.TastingNote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BrewID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(1000);

                    b.HasKey("ID");

                    b.HasIndex("BrewID");

                    b.ToTable("TastingNotes");

                    b.HasData(
                        new
                        {
                            ID = 2000,
                            BrewID = 3000,
                            Date = new DateTime(2020, 8, 3, 16, 51, 6, 766, DateTimeKind.Local).AddTicks(6482),
                            Note = "Not a million miles away from the real thing!"
                        },
                        new
                        {
                            ID = 2001,
                            BrewID = 3001,
                            Date = new DateTime(2019, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Yep, this one isn't great, there is an odd metalic taste associated with it."
                        },
                        new
                        {
                            ID = 2002,
                            BrewID = 3002,
                            Date = new DateTime(2020, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Cool, think I have found a house brew I can easily do and drink :)"
                        },
                        new
                        {
                            ID = 2004,
                            BrewID = 3002,
                            Date = new DateTime(2020, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "The taste of this improves after a few weeks"
                        },
                        new
                        {
                            ID = 2003,
                            BrewID = 3003,
                            Date = new DateTime(2020, 8, 3, 16, 51, 6, 769, DateTimeKind.Local).AddTicks(4257),
                            Note = "Nice clean flavour with a reasonably strong aroma.  Clarity has improved over the past week"
                        });
                });

            modelBuilder.Entity("homebrewAppServerAPI.Domain.Models.Timer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecipeStepID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("RecipeStepID")
                        .IsUnique();

                    b.ToTable("Timers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Duration = 3705L,
                            RecipeStepID = 9000,
                            Type = 0
                        },
                        new
                        {
                            ID = 2,
                            Duration = 2L,
                            RecipeStepID = 9001,
                            Type = 0
                        });
                });

            modelBuilder.Entity("homebrewAppServerAPI.Domain.Models.WaterProfile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("WaterProfiles");

                    b.HasData(
                        new
                        {
                            ID = 1000,
                            Description = "Soft water profile used to accentuate the hop profile",
                            Name = "APA focused"
                        },
                        new
                        {
                            ID = 1001,
                            Description = "Minimal mineral addition to give a clean flavour to the beer",
                            Name = "Lager focused"
                        },
                        new
                        {
                            ID = 1002,
                            Description = "Used to accentuate both the malt and hops of the beer",
                            Name = "Stout focused"
                        });
                });

            modelBuilder.Entity("homebrewAppServerAPI.Domain.Models.WaterProfileAddition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<int>("Unit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WaterProfileID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("WaterProfileID");

                    b.ToTable("WaterProfileAdditons");

                    b.HasData(
                        new
                        {
                            ID = 9000,
                            Amount = 6.0,
                            Name = "Lactic acid",
                            Unit = 101,
                            WaterProfileID = 1000
                        },
                        new
                        {
                            ID = 9001,
                            Amount = 3.6000000000000001,
                            Name = "Gypsum",
                            Unit = 1,
                            WaterProfileID = 1000
                        },
                        new
                        {
                            ID = 9002,
                            Amount = 3.6000000000000001,
                            Name = "Bicarbonate soda",
                            Unit = 1,
                            WaterProfileID = 1000
                        },
                        new
                        {
                            ID = 9003,
                            Amount = 3.6000000000000001,
                            Name = "Epsom salt",
                            Unit = 1,
                            WaterProfileID = 1000
                        });
                });

            modelBuilder.Entity("homebrewAppServerAPI.Domain.Models.Brew", b =>
                {
                    b.HasOne("homebrewAppServerAPI.Domain.Models.Recipe", "Recipe")
                        .WithMany("Brews")
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("homebrewAppServerAPI.Domain.Models.Ingredient", b =>
                {
                    b.HasOne("homebrewAppServerAPI.Domain.Models.RecipeStep", "RecipeStep")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeStepID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("homebrewAppServerAPI.Domain.Models.Recipe", b =>
                {
                    b.HasOne("homebrewAppServerAPI.Domain.Models.WaterProfile", "WaterProfile")
                        .WithMany()
                        .HasForeignKey("WaterProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("homebrewAppServerAPI.Domain.Models.RecipeStep", b =>
                {
                    b.HasOne("homebrewAppServerAPI.Domain.Models.Recipe", "Recipe")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("homebrewAppServerAPI.Domain.Models.TastingNote", b =>
                {
                    b.HasOne("homebrewAppServerAPI.Domain.Models.Brew", "Brew")
                        .WithMany("TastingNotes")
                        .HasForeignKey("BrewID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("homebrewAppServerAPI.Domain.Models.Timer", b =>
                {
                    b.HasOne("homebrewAppServerAPI.Domain.Models.RecipeStep", "RecipeStep")
                        .WithOne("Timer")
                        .HasForeignKey("homebrewAppServerAPI.Domain.Models.Timer", "RecipeStepID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("homebrewAppServerAPI.Domain.Models.WaterProfileAddition", b =>
                {
                    b.HasOne("homebrewAppServerAPI.Domain.Models.WaterProfile", "WaterProfile")
                        .WithMany("Additions")
                        .HasForeignKey("WaterProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
